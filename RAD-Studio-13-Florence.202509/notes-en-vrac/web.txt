RAD Studio 13 Florence et le web

-----

# Liens

https://blogs.embarcadero.com/announcing-the-availability-of-rad-studio-13-florence/

https://blogs.embarcadero.com/webstencils-is-about-to-get-more-powerful-in-rad-studio-13/

https://blogs.embarcadero.com/webstencils-whats-new-in-rad-studio-13-0-florence/

https://docwiki.embarcadero.com/RADStudio/Florence/en/What%27s_New

# RTL

# Composants

VCL : TEdgeBrowser Component integrating Microsoft’s Chromium-based Edge WebView2 component and changes to the TWebBrowser component to support both IE and Edge– based on Microsoft release version of Edge WebView2 component and supporting custom cache folders, with support for the UserDataFolder and the ExecutableFolder configurations. Enhanced in 13.0 with additional properties and methods, mapped to features in recent versions of the WebView 2 control.

FMX : WebBrowser component for Windows, with support for both the classic IE ActiveX and the Microsoft WebView 2 control (Chromium-based Edge). Updated in version 13.

# WebBroker
https://docwiki.embarcadero.com/Libraries/Florence/en/Web.WebBroker

WebBroker library for HTTP server development and integration, supporting CGI, ISAPI libraries for Microsoft IIS, Apache HTTP server modules, and native HTTP servers based on Indy library. Extended in 13 with better Apache integration, Nginx web server support, and improved logging.

WebBroker sessions management
https://docwiki.embarcadero.com/Libraries/Florence/en/Web.HTTPApp.TWebSessionManager
https://docwiki.embarcadero.com/Libraries/Florence/en/Web.HTTPApp.TWebSession
https://docwiki.embarcadero.com/Libraries/Florence/en/Web.HTTPApp.TWebRequest.Session

Log output
There is a new TWebApplication.Log method with severity, message, and params, that is supported on all platforms, using the proper hosting web server log system:
Apache: Apache server log file, by default logs\error.log.
ISAPI: Windows Event Log (eventvwr.msc): Windows Logs
CGI: file with TCGIApplication.LogFileName name.
FastCGI: HTTP (Apache, nginx) server log file, by default logs\error.log.

Extended TWebRequest
This release extended the TWebRequest to now offer:
ExtractAllHeaders method, AllHeaders property
SessionID
AuthUserName and AuthMethod

Apache Config (Delphi uniquement, non supporté en C++Builder pour le moment)
This release introduces Apache Config, a textual and extensible configuration system. Below is an example of the configuration.
Example:
MyEnabled On
MyFolder "c:/temp"
MyMimeTypes image/bmp text/html
<Location /qwe/asd>
  MyEnabled On
  MyFolder "c:/temp/asd"
</Location>
<Location /qwe/asd/zxc>
  MyMimeTypes image/png image/jpeg text/html
  MyRole admin
</Location>
Uses mapping of a Delphi record to Apache directives (only non-managed field types, including string[n]):
Use WebHTTPMethod attributes to customize mapping.
Use the Web.ApacheApp.InitConfig to register the record type. Call it right after InitApplication.
Use the Web.ApacheHTTP. TApacheRequest.GetConfig to get a record instance with values specific to a request URL.
Use the Web.HTTPDMethods.IHTTPDConfigAdaptor, THTTPDCustomConfigAdaptor<T> to customize record initialization and overriding.
The WebBroker Wizard has the option to include an Apache config sample.

FastGCI and NGINX Support
This release adds FastCGI support for nginx. This interface provides access to a web module running as a separate application.
In more detail:
Added a new Web.FastCGIApp.pas, Web.FastCGIHTTP.pas, and Web.FCGI_Protocol.pas units.
FastCGI is supported by nginx and Apache.
Added new classes: TFastCGIApplication, TFastCGIRequest, and TFastCGIResponse.
Added support for FastCGI to the WebBroker Wizard.
To register an application with nginx, add the following lines to conf\nginx.conf:
# 1) "location" mask, fastcgi_param directives are environment dependent
# 2) Update the fastcgi_pass directive when the host or port is different
# 3) This will redirect the request "GET http://localhost:8000/fcgi/" 
#    to the FastCGI server.
        location ~ ^/fcgi(.*)$ {
            include fastcgi_params;
            fastcgi_param SCRIPT_NAME /fcgi;
            fastcgi_param PATH_INFO   $1;
            fastcgi_param SCRIPT_FILENAME dummy;
            fastcgi_param PATH_TRANSLATED $document_root$1;
            fastcgi_keep_conn on;
            fastcgi_pass 127.0.0.1:9000;
        }

# RAD Server

Enterprise editions include free RAD Server Lite (RSLite) deployment and a single site RAD Server deployment license, while Architect editions include a multi-site deployment license

Add support for server API versioning (that is, having a server offering multiple versions of the same REST APIs for older and newer client applications)

RAD Server turnkey REST based middleware stack that includes API hosting, data access, and SQL Database access, with significantly optimized performance

RAD Server (EMS) multi-tenancy support and console app for managing tenants configuration (on Windows and Linux). Version 13 adds to the RAD Server Multi-tenancy support an option to integrate tenant-specific configuration.

Mise à jour du conteneur Docker pour RAD Server Lite

RAD Studio 13.0 makes the use of the Swagger-based API Documentation more flexible, as schema and reference parameters are now optional, adds to the RAD Server Multi-tenancy support an option to integrate tenant-specific configuration, and introduces a simple and direct way to implement API Versioning (that is having a server offering multiple versions of the same REST APIs for older and newer client applications).

RAD Studio 13.0 makes the use of the Swagger-based API Documentation more flexible, adds to the RAD Server Multi-tenancy support an option to integrate tenant-specific configuration, and introduces a simple and direct way to implement API Versioning.

The following section points out the improvements to RAD Server in the RAD Studio Florence 13.0 release.

* RAD Server Swagger API Documentation; Schema and reference params for Swagger and OpenAPI definitions are now optional.
* Adds the option to return a custom header in the Swagger response doc using the new EndPointResponseHeaderAttribute attribute.
New SetBaseUrl and GetBaseUrl methods.
* This release adds to the RAD Server Multi-Tenancy Support a way to integrate tenant-specific configuration (like database connections), to be set up before any business logic runs. Specifically, the following were added:
Tenant-prefixed server variables: specifying a tenant-prefixed variable ensures that its value is used. Otherwise, a variable without a tenant prefix is used.
An IEMSResourceInterceptor interface with BeforeRequest and AfterRequest methods.
* RAD Server now supports exporting multiple versions of the same API function, allowing clients to invoke the REST API in its most recent version or an older one by using the new ResourceVersion attribute. The new TEMSVersionStatus values are as follows:
Experimental - uses ver/myapi/… as base url and adds “Experimental” to the Swagger description.
Active - uses ver/myapi/… as base url.
Default - uses ver/myapi/… and myapi/… as base urls.
Deprecated - uses ver/myapi/… as base url and adds “Deprecated” to the Swagger description.

# WebStencils

WebStencils server-side script-based integration and processing of HTML files, to develop modern websites based on any JavaScript library, powered by the data extracted and processed by a RAD Studio server-side application. This is a sophisticated architecture introduced in RAD Studio 12.2, significantly extended in 13 with support for session data, global variables, a new switch statement, integrated WebBroker sessions authentication and authorization, direct access to dataset properties.

Use the WebStencils components, TWebStencilsProcessor and TWebStencilsEngine, to customize the template engine, control the file locations and the URL mapping, define URL parameters, and pass objects, datasets and collections to the scripts. The TWebStencilProcessor component implements the same interface of the old TPageProducer used in WebBroker and DataSnap and can replace it.

WebStencils significantly extends the existing web technologies in RAD Studio by providing server-side scripting and turning RAD Server from a Web Service engine into a Web Site and Web Service tool.

The following section describes the WebStencils updates introduced in RAD Studio Florence 13.0.

* Implemented the whitelist mechanism property to prevent exposure of sensitive information like database connection strings or any other sensitive information. Find out how to customize the whitelist.
* Introduced the ability to add extra variables to the script engine outside of the object and dataset models.
* The WebStencils @ notation for a dataset now allows access to the dataset properties, in addition to the field. The level of access to the show field can be controlled using a specific property (TWebStencilsProcessor.Whitelist) to prevent unauthorized access to internal information. Find out more here.
* WebStencils now automatically integrates with web sessions when available, learn more here.
* WebStencils now supports @ExtraHeader content propagation through nested layout hierarchies, learn more here.
* Added enhancements to the WebStencils Keywords by giving the keyword @page two extra values, such as @page.request_path and @page.request_segment.

# Updates to the Web Client Libraries

The RAD Studio Florence 13.0 release brings the following updates:

Added HTTP/3 protocol support to THttpClient via THTTPProtocolVersion.HTTP_3_0.

For SOAP clients, there is now an asynchronous version of THTTPReqResp.Execute.
